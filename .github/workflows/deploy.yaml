name: Deploy to AWS ECR

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Apply Terraform and Get Outputs
        id: terraform_outputs
        run: |
          terraform init
          terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}" -var="db_username=${{ secrets.DB_USERNAME }}"
          echo "AWS_ACCOUNT_ID=$(terraform output -raw aws_account_id)" >> $GITHUB_ENV
          echo "AWS_REGION=$(terraform output -raw aws_region)" >> $GITHUB_ENV
          echo "ECR_BACKEND_NAME=$(terraform output -raw ecr_backend_name)" >> $GITHUB_ENV
          echo "ECR_FRONTEND_NAME=$(terraform output -raw ecr_frontend_name)" >> $GITHUB_ENV
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
        working-directory: ./agrocd

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Authenticate Docker to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Set Docker Image Tags
        run: |
          IMAGE_TAG=latest-${{ github.sha }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build Docker image for Backend
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_BACKEND_NAME }}:${{ env.IMAGE_TAG }} ./backend

      - name: Push Docker image to Backend ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_BACKEND_NAME }}:${{ env.IMAGE_TAG }}

      - name: Build Docker image for Frontend
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_FRONTEND_NAME }}:${{ env.IMAGE_TAG }} ./frontend

      - name: Push Docker image to Frontend ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_FRONTEND_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy ArgoCD
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --create-namespace \
            --set server.service.type=LoadBalancer \
            --set server.ingress.enabled=true \
            --set server.ingress.hosts[0]=argocd.${{ env.AWS_REGION }}.amazonaws.com

      - name: Verify Ingress for Backend and Frontend
        run: |
          kubectl get ingress backend-ingress || echo "Backend ingress not found"
          kubectl get ingress frontend-ingress || echo "Frontend ingress not found"

      - name: Monitor AWS Load Balancer logs
        run: |
          kubectl logs -n kube-system deployment/aws-load-balancer-controller || echo "No logs found"
